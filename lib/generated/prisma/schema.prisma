generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account_Items {
  AccountID     String      @db.Uuid
  ItemID        BigInt
  Price         BigInt
  PurchasePrice BigInt
  Qty           BigInt
  ImageLink     String
  Accounts      Accounts    @relation(fields: [AccountID], references: [AccountID], onDelete: NoAction, onUpdate: NoAction, map: "account_items_accountid_foreign")
  Items         Items       @relation(fields: [ItemID], references: [ItemID], onDelete: NoAction, onUpdate: NoAction, map: "account_items_itemid_foreign")
  orderItems    OrderItem[]

  @@id([AccountID, ItemID]) // Composite primary key
  @@index([AccountID, ItemID], map: "account_items_accountid_itemid_index")
}

model Accounts {
  AccountID     String          @id @db.Uuid
  Email         String          @unique(map: "accounts_email_unique") @db.VarChar(255)
  FirstName     String          @db.VarChar(64)
  LastName      String          @db.VarChar(64)
  Password      Bytes
  Type          String
  Username      String?         @unique(map: "accounts_username_unique") @db.VarChar(255)
  FacebookID    String?         @unique(map: "accounts_facebookid_unique") @db.VarChar(255)
  GoogleID      String?         @unique(map: "accounts_googleid_unique") @db.VarChar(255)
  WorkArea      Json?
  WorkAreaIDs   Int[]
  Account_Items Account_Items[]
  ChatMember    ChatMember[]

  Message Message[]

  SentOrders     Orders[] @relation("SentOrders")
  ReceivedOrders Orders[] @relation("ReceivedOrders")
}

model Items {
  ItemID           BigInt          @id @default(autoincrement()) @db.BigInt
  Name             String          @db.VarChar(64)
  Code             BigInt          @unique(map: "items_code_unique") @db.BigInt
  CategoryID       BigInt
  Brand            String          @db.VarChar(64)
  Type             String          @db.VarChar(32)
  DefaultImageLink String
  Account_Items    Account_Items[]

  @@index([Code], map: "items_code_index")
}

model Chat {
  ChatID        String       @id @default(uuid())
  Name          String       @default("")
  Type          String       @default("")
  lastMessageAt DateTime     @default(now())
  Messages      Message[]    @relation("ChatToMessages")
  Members       ChatMember[]
}

model ChatMember {
  ChatID   String
  Username String
  Chat     Chat     @relation(fields: [ChatID], references: [ChatID])
  User     Accounts @relation(fields: [Username], references: [Username])

  @@id([ChatID, Username])
}

model Message {
  MessageID      String           @id @default(uuid())
  ChatID         String
  SenderUsername String
  Chat           Chat             @relation("ChatToMessages", fields: [ChatID], references: [ChatID])
  Sender         Accounts         @relation(fields: [SenderUsername], references: [Username])
  MessageContent MessageContent[]
  Status         String           @default("SENT")
  CreatedAt      DateTime         @default(now())
}

model MessageContent {
  MessageContentID Int     @id @default(autoincrement())
  MessageID        String
  Message          Message @relation(fields: [MessageID], references: [MessageID], onDelete: Cascade)
  Index            Int
  Text             String?
  Filename         String?
  MimeType         String?
  Data             Bytes?
}

model Orders {
  OrderID    String      @id @default(uuid())
  SenderID   String      @db.Uuid // references Accounts.AccountID
  ReceiverID String      @db.Uuid // references Accounts.AccountID
  Items      OrderItem[] // relation to order items
  CreatedAt  DateTime    @default(now())
  Status     String      @default("PENDING")

  Sender   Accounts @relation("SentOrders", fields: [SenderID], references: [AccountID])
  Receiver Accounts @relation("ReceivedOrders", fields: [ReceiverID], references: [AccountID])

  OrderHistory OrderHistory[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  accountId String @db.Uuid
  itemId    BigInt
  quantity  BigInt

  accountItem Account_Items @relation(fields: [accountId, itemId], references: [AccountID, ItemID])

  order   Orders @relation(fields: [orderId], references: [OrderID], onDelete: Cascade)
  orderId String
}

model OrderHistory {
  OrderHistoryID String @id @default(uuid())
  OrderID        String // references Orders.OrderID
  Record         Json // immutable JSON snapshot of order

  Order Orders @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade)
}
